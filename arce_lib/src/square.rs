use core::panic;
use std::{convert::TryFrom, fmt::Display};

pub const SQUARES: [Square; 64] = [
    Square::A1,
    Square::B1,
    Square::C1,
    Square::D1,
    Square::E1,
    Square::F1,
    Square::G1,
    Square::H1,
    Square::A2,
    Square::B2,
    Square::C2,
    Square::D2,
    Square::E2,
    Square::F2,
    Square::G2,
    Square::H2,
    Square::A3,
    Square::B3,
    Square::C3,
    Square::D3,
    Square::E3,
    Square::F3,
    Square::G3,
    Square::H3,
    Square::A4,
    Square::B4,
    Square::C4,
    Square::D4,
    Square::E4,
    Square::F4,
    Square::G4,
    Square::H4,
    Square::A5,
    Square::B5,
    Square::C5,
    Square::D5,
    Square::E5,
    Square::F5,
    Square::G5,
    Square::H5,
    Square::A6,
    Square::B6,
    Square::C6,
    Square::D6,
    Square::E6,
    Square::F6,
    Square::G6,
    Square::H6,
    Square::A7,
    Square::B7,
    Square::C7,
    Square::D7,
    Square::E7,
    Square::F7,
    Square::G7,
    Square::H7,
    Square::A8,
    Square::B8,
    Square::C8,
    Square::D8,
    Square::E8,
    Square::F8,
    Square::G8,
    Square::H8,
];

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
#[repr(u8)]
pub enum Square {
    A1 = 0,
    B1,
    C1,
    D1,
    E1,
    F1,
    G1,
    H1,
    A2,
    B2,
    C2,
    D2,
    E2,
    F2,
    G2,
    H2,
    A3,
    B3,
    C3,
    D3,
    E3,
    F3,
    G3,
    H3,
    A4,
    B4,
    C4,
    D4,
    E4,
    F4,
    G4,
    H4,
    A5,
    B5,
    C5,
    D5,
    E5,
    F5,
    G5,
    H5,
    A6,
    B6,
    C6,
    D6,
    E6,
    F6,
    G6,
    H6,
    A7,
    B7,
    C7,
    D7,
    E7,
    F7,
    G7,
    H7,
    A8,
    B8,
    C8,
    D8,
    E8,
    F8,
    G8,
    H8,
}

impl Square {
    #[inline]
    pub fn from_u8_unchecked(square: u8) -> Square {
        match square {
            0 => Self::A1,
            1 => Self::B1,
            2 => Self::C1,
            3 => Self::D1,
            4 => Self::E1,
            5 => Self::F1,
            6 => Self::G1,
            7 => Self::H1,
            8 => Self::A2,
            9 => Self::B2,
            10 => Self::C2,
            11 => Self::D2,
            12 => Self::E2,
            13 => Self::F2,
            14 => Self::G2,
            15 => Self::H2,
            16 => Self::A3,
            17 => Self::B3,
            18 => Self::C3,
            19 => Self::D3,
            20 => Self::E3,
            21 => Self::F3,
            22 => Self::G3,
            23 => Self::H3,
            24 => Self::A4,
            25 => Self::B4,
            26 => Self::C4,
            27 => Self::D4,
            28 => Self::E4,
            29 => Self::F4,
            30 => Self::G4,
            31 => Self::H4,
            32 => Self::A5,
            33 => Self::B5,
            34 => Self::C5,
            35 => Self::D5,
            36 => Self::E5,
            37 => Self::F5,
            38 => Self::G5,
            39 => Self::H5,
            40 => Self::A6,
            41 => Self::B6,
            42 => Self::C6,
            43 => Self::D6,
            44 => Self::E6,
            45 => Self::F6,
            46 => Self::G6,
            47 => Self::H6,
            48 => Self::A7,
            49 => Self::B7,
            50 => Self::C7,
            51 => Self::D7,
            52 => Self::E7,
            53 => Self::F7,
            54 => Self::G7,
            55 => Self::H7,
            56 => Self::A8,
            57 => Self::B8,
            58 => Self::C8,
            59 => Self::D8,
            60 => Self::E8,
            61 => Self::F8,
            62 => Self::G8,
            63 => Self::H8,
            _ => panic!("failed to convert u8 to square"),
        }
    }

    #[inline]
    pub fn from_u8(square: u8) -> Option<Square> {
        Some(match square {
            0 => Self::A1,
            1 => Self::B1,
            2 => Self::C1,
            3 => Self::D1,
            4 => Self::E1,
            5 => Self::F1,
            6 => Self::G1,
            7 => Self::H1,
            8 => Self::A2,
            9 => Self::B2,
            10 => Self::C2,
            11 => Self::D2,
            12 => Self::E2,
            13 => Self::F2,
            14 => Self::G2,
            15 => Self::H2,
            16 => Self::A3,
            17 => Self::B3,
            18 => Self::C3,
            19 => Self::D3,
            20 => Self::E3,
            21 => Self::F3,
            22 => Self::G3,
            23 => Self::H3,
            24 => Self::A4,
            25 => Self::B4,
            26 => Self::C4,
            27 => Self::D4,
            28 => Self::E4,
            29 => Self::F4,
            30 => Self::G4,
            31 => Self::H4,
            32 => Self::A5,
            33 => Self::B5,
            34 => Self::C5,
            35 => Self::D5,
            36 => Self::E5,
            37 => Self::F5,
            38 => Self::G5,
            39 => Self::H5,
            40 => Self::A6,
            41 => Self::B6,
            42 => Self::C6,
            43 => Self::D6,
            44 => Self::E6,
            45 => Self::F6,
            46 => Self::G6,
            47 => Self::H6,
            48 => Self::A7,
            49 => Self::B7,
            50 => Self::C7,
            51 => Self::D7,
            52 => Self::E7,
            53 => Self::F7,
            54 => Self::G7,
            55 => Self::H7,
            56 => Self::A8,
            57 => Self::B8,
            58 => Self::C8,
            59 => Self::D8,
            60 => Self::E8,
            61 => Self::F8,
            62 => Self::G8,
            63 => Self::H8,
            _ => return None,
        })
    }

    pub fn from_fr_unchecked(file: u8, rank: u8) -> Square {
        Self::from_u8_unchecked(8 * rank + file)
    }
}

/// (File, Rank)
impl From<Square> for (u8, u8) {
    fn from(square: Square) -> Self {
        (square as u8 & 0b111, square as u8 / 8)
    }
}

/// (File, Rank)
impl From<Square> for (i8, i8) {
    fn from(square: Square) -> Self {
        ((square as u8 & 0b111) as i8, (square as u8 / 8) as i8)
    }
}

/// (File, Rank)
impl TryFrom<(u8, u8)> for Square {
    type Error = ();

    fn try_from(value: (u8, u8)) -> Result<Self, Self::Error> {
        Square::try_from(8 * value.0 + value.1)
    }
}

impl TryFrom<u8> for Square {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        Ok(match value {
            0 => Self::A1,
            1 => Self::B1,
            2 => Self::C1,
            3 => Self::D1,
            4 => Self::E1,
            5 => Self::F1,
            6 => Self::G1,
            7 => Self::H1,
            8 => Self::A2,
            9 => Self::B2,
            10 => Self::C2,
            11 => Self::D2,
            12 => Self::E2,
            13 => Self::F2,
            14 => Self::G2,
            15 => Self::H2,
            16 => Self::A3,
            17 => Self::B3,
            18 => Self::C3,
            19 => Self::D3,
            20 => Self::E3,
            21 => Self::F3,
            22 => Self::G3,
            23 => Self::H3,
            24 => Self::A4,
            25 => Self::B4,
            26 => Self::C4,
            27 => Self::D4,
            28 => Self::E4,
            29 => Self::F4,
            30 => Self::G4,
            31 => Self::H4,
            32 => Self::A5,
            33 => Self::B5,
            34 => Self::C5,
            35 => Self::D5,
            36 => Self::E5,
            37 => Self::F5,
            38 => Self::G5,
            39 => Self::H5,
            40 => Self::A6,
            41 => Self::B6,
            42 => Self::C6,
            43 => Self::D6,
            44 => Self::E6,
            45 => Self::F6,
            46 => Self::G6,
            47 => Self::H6,
            48 => Self::A7,
            49 => Self::B7,
            50 => Self::C7,
            51 => Self::D7,
            52 => Self::E7,
            53 => Self::F7,
            54 => Self::G7,
            55 => Self::H7,
            56 => Self::A8,
            57 => Self::B8,
            58 => Self::C8,
            59 => Self::D8,
            60 => Self::E8,
            61 => Self::F8,
            62 => Self::G8,
            63 => Self::H8,
            _ => return Err(()),
        })
    }
}

impl TryFrom<&str> for Square {
    type Error = ();

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        Ok(match value {
            "a1" => Self::A1,
            "b1" => Self::B1,
            "c1" => Self::C1,
            "d1" => Self::D1,
            "e1" => Self::E1,
            "f1" => Self::F1,
            "g1" => Self::G1,
            "h1" => Self::H1,
            "a2" => Self::A2,
            "b2" => Self::B2,
            "c2" => Self::C2,
            "d2" => Self::D2,
            "e2" => Self::E2,
            "f2" => Self::F2,
            "g2" => Self::G2,
            "h2" => Self::H2,
            "a3" => Self::A3,
            "b3" => Self::B3,
            "c3" => Self::C3,
            "d3" => Self::D3,
            "e3" => Self::E3,
            "f3" => Self::F3,
            "g3" => Self::G3,
            "h3" => Self::H3,
            "a4" => Self::A4,
            "b4" => Self::B4,
            "c4" => Self::C4,
            "d4" => Self::D4,
            "e4" => Self::E4,
            "f4" => Self::F4,
            "g4" => Self::G4,
            "h4" => Self::H4,
            "a5" => Self::A5,
            "b5" => Self::B5,
            "c5" => Self::C5,
            "d5" => Self::D5,
            "e5" => Self::E5,
            "f5" => Self::F5,
            "g5" => Self::G5,
            "h5" => Self::H5,
            "a6" => Self::A6,
            "b6" => Self::B6,
            "c6" => Self::C6,
            "d6" => Self::D6,
            "e6" => Self::E6,
            "f6" => Self::F6,
            "g6" => Self::G6,
            "h6" => Self::H6,
            "a7" => Self::A7,
            "b7" => Self::B7,
            "c7" => Self::C7,
            "d7" => Self::D7,
            "e7" => Self::E7,
            "f7" => Self::F7,
            "g7" => Self::G7,
            "h7" => Self::H7,
            "a8" => Self::A8,
            "b8" => Self::B8,
            "c8" => Self::C8,
            "d8" => Self::D8,
            "e8" => Self::E8,
            "f8" => Self::F8,
            "g8" => Self::G8,
            "h8" => Self::H8,
            _ => return Err(()),
        })
    }
}

impl Display for Square {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            Square::A1 => "a1",
            Square::B1 => "b1",
            Square::C1 => "c1",
            Square::D1 => "d1",
            Square::E1 => "e1",
            Square::F1 => "f1",
            Square::G1 => "g1",
            Square::H1 => "h1",
            Square::A2 => "a2",
            Square::B2 => "b2",
            Square::C2 => "c2",
            Square::D2 => "d2",
            Square::E2 => "e2",
            Square::F2 => "f2",
            Square::G2 => "g2",
            Square::H2 => "h2",
            Square::A3 => "a3",
            Square::B3 => "b3",
            Square::C3 => "c3",
            Square::D3 => "d3",
            Square::E3 => "e3",
            Square::F3 => "f3",
            Square::G3 => "g3",
            Square::H3 => "h3",
            Square::A4 => "a4",
            Square::B4 => "b4",
            Square::C4 => "c4",
            Square::D4 => "d4",
            Square::E4 => "e4",
            Square::F4 => "f4",
            Square::G4 => "g4",
            Square::H4 => "h4",
            Square::A5 => "a5",
            Square::B5 => "b5",
            Square::C5 => "c5",
            Square::D5 => "d5",
            Square::E5 => "e5",
            Square::F5 => "f5",
            Square::G5 => "g5",
            Square::H5 => "h5",
            Square::A6 => "a6",
            Square::B6 => "b6",
            Square::C6 => "c6",
            Square::D6 => "d6",
            Square::E6 => "e6",
            Square::F6 => "f6",
            Square::G6 => "g6",
            Square::H6 => "h6",
            Square::A7 => "a7",
            Square::B7 => "b7",
            Square::C7 => "c7",
            Square::D7 => "d7",
            Square::E7 => "e7",
            Square::F7 => "f7",
            Square::G7 => "g7",
            Square::H7 => "h7",
            Square::A8 => "a8",
            Square::B8 => "b8",
            Square::C8 => "c8",
            Square::D8 => "d8",
            Square::E8 => "e8",
            Square::F8 => "f8",
            Square::G8 => "g8",
            Square::H8 => "h8",
        };
        write!(f, "{}", s)
    }
}
